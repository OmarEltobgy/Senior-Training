#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <functional>
#include <stack>
#include <math.h>
#include <iterator>

using namespace std;

int numbers[2000];
int neighbours[2000];
bool visited[2000];
map<int, int> input; // number, index
int N;
long long cycleSum;
int cycleNodesNumber;

void bfs(int sourceNode)
{
    cycleSum = 0;
    cycleNodesNumber = 0;
    queue<int> q;
    visited[sourceNode] = true;
    q.push(sourceNode);

    while(q.empty() == false)
    {
        int f = q.front();
        q.pop();
        cycleSum += numbers[f];
        cycleNodesNumber ++;
        if(visited[neighbours[f]] == false)
        {
            visited[neighbours[f]] = true;
            q.push(neighbours[f]);
        }
    }
}

int main()
{
    int testN = 1;
    scanf("%d",&N);
    while(N != 0)
    {
        input.clear();
        for(int i=0; i<N; i++)
        {
            int temp;
            scanf("%d",&temp);
            input[temp] = i;
            numbers[i] = temp;
            visited[i] = false;
        }

        int nowIndex = 0;
        int leastNumber = input.begin()->first;
        map<int,int>::iterator it;

        for (it=input.begin(); it!=input.end(); ++it)
        {
            int index = it->second;
            neighbours[index] = nowIndex;
            nowIndex++;
        }

        long long res = 0, sum1=0, sum2=0;
        for (it=input.begin(); it!=input.end(); ++it)
        {
            int nowLeastNumber = it->first;
            int i = it->second;

            if(visited[i] == false)
            {
                bfs(i);

                sum1 = cycleSum + nowLeastNumber*(cycleNodesNumber-2);
                sum2 = (cycleSum+leastNumber) + leastNumber*((cycleNodesNumber+1)-2) + (leastNumber+nowLeastNumber);

                res += min(sum1, sum2);
            }
        }

        printf("Case %d: %lld\n\n", testN, res);

        testN++;
        scanf("%d",&N);
    }
    return 0;
}
