#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <functional>
#include <stack>
#include <math.h>
#include <iterator>
#include <algorithm>

using namespace std;

int neighbours[30];
bool visited[30];
int cycleN[30];
//vector<int> cycle;
//vector<int> values;
int cycleSize;

void bfs(int sourceNode)
{
    cycleSize = 0;
    queue<int> q;
    visited[sourceNode] = true;
    q.push(sourceNode);

    while(q.empty() == false)
    {
        int f = q.front();
        cycleSize ++;
        q.pop();
        if(visited[neighbours[f]] == false)
        {
            visited[neighbours[f]] = true;
            q.push(neighbours[f]);
        }
    }
}

int main()
{
    int testN;
    scanf("%d",&testN);
    char temp;
    while(testN--)
    {
        memset(cycleN, 0, sizeof(cycleN));

        scanf("%c",&temp); // for the previous '\n'
        for(int i=0; i<26; i++)
        {
            scanf("%c",&temp);
            neighbours[i] = temp-'A';
            visited[i] = false;
        }

        for(int i=0; i<26; i++)
        {
            if(visited[i] == false)
            {
                bfs(i);
                //cout << cycleSize << endl;
                if(cycleSize % 2 == 0) // Even
                {
                    //if(cycleN[cycleSize] == 0)
                    //{
                    cycleN[cycleSize] ++;
                    //}
                    //else //if(cycleN[cycleSize] == 1)
                    //{
                    //    cycleN[cycleSize] = 0;
                    //}
                }
            }
        }

        bool YES = true;
        for(int i=0; i<30; i++)
        {
            if(cycleN[i] % 2 != 0)
            {
                YES = false;
            }
        }

        if(YES == true)
        {
            printf("Yes\n");
        }
        else
        {
            printf("No\n");
        }
    }
    return 0;
}
