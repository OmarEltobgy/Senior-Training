#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <functional>
#include <stack>
#include <math.h>
#include <iterator>
#include <algorithm>

using namespace std;

int tilesN;
vector<vector<int> > adjList; //for the first set of nodes
int maximum;
int INF = 1000000000;

int child[150]; //for the first set of nodes
int parent[150]; //for the second set of nodes
bool coupledBefore[150]; //for the second set of nodes
bool visitedThisTime[150]; //for the first set of nodes

bool findAugmentPath(int nowNode)
{
    if(visitedThisTime[nowNode] == true)
    {
        return false;
    }

    visitedThisTime[nowNode] = true;

    for(int i=0; i<(int)adjList[nowNode].size(); i++)
    {
        int next = adjList[nowNode][i];
        if(coupledBefore[next] == false)
        {
            parent[next] = nowNode;
            child[nowNode] = next;
            coupledBefore[next] = true;
            return true;
        }
        else
        {
            if(findAugmentPath(parent[next]) == true)
            {
                parent[next] = nowNode;
                child[nowNode] = next;
                return true;
            }
        }
    }

    return false;
}

int main()
{
    int testN;
    scanf("%d",&testN);
    while(testN--)
    {
        adjList.clear();
        adjList.resize(150);
        memset(coupledBefore, 0, sizeof(coupledBefore));
        memset(child, -1, sizeof(child));
        memset(parent, -1, sizeof(parent));

        int maxFirst = -1;
        scanf("%d",&tilesN);
        for(int i=0; i<tilesN; i++)
        {
            int first, second;

            scanf("%d %d",&first,&second);
            first = first;
            second = second;
            maxFirst = max(first, maxFirst);

            adjList[first].push_back(second);
        }

        maximum = 0;
        for(int i=0; i<=maxFirst; i++)
        {
            memset(visitedThisTime, 0, sizeof(visitedThisTime));
            if(findAugmentPath(i) == true)
            {
                maximum++;
            }
        }

        printf("%d\n", maximum);
    }



    return 0;
}
