#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <functional>
#include <stack>
#include <math.h>
#include <iterator>
#include <algorithm>

using namespace std;

long long primeFactor[1000100];
double result[1000100];

int main()
{
    int maxN = 1000100, i, j;
    memset(primeFactor, 0, sizeof(primeFactor));

    primeFactor[0] = -1;
    primeFactor[1] = -1;
    for(i=2; i*i<maxN; i++)
    {
        if(primeFactor[i] == 0) // prime
        {
            primeFactor[i] = i;
            for(j=i*i; j<maxN; j+=i)
            {
                primeFactor[j] = i;
            }
        }
    }

    for(i=i; i<maxN; i++)
    {
        if(primeFactor[i] == 0)
        {
            primeFactor[i] = i;
        }
    }

    long long primeNTillNow = 0;
    long long primeFactorN = 0;

    for(i=0; i<maxN; i++)
    {
        result[i] = 0;
    }

    for(i=2; i<maxN; i++)
    {
        if(primeFactor[i] == i)
        {
            primeNTillNow++;
        }

        int temp = i;
        primeFactorN = 0;
        while(temp != 1)
        {
            int nowPrime = primeFactor[temp];
            primeFactorN ++;

            result[i] += result[i/nowPrime];

            while(temp % nowPrime == 0)
            {
                temp = temp / nowPrime;
            }
        }

        result[i] *= 1.0/(double)primeNTillNow;

        result[i] += 1;

        result[i] /= ( 1.0 - ( (double)(primeNTillNow-primeFactorN)/(double)primeNTillNow ) );
    }

    int N, T;
    scanf("%d",&T);
    for(int tt=1; tt<=T; tt++)
    {
        scanf("%d",&N);
        printf("Case %d: %lf\n", tt, result[N]);
    }

    return 0;
}
