#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <functional>
#include <stack>
#include <math.h>
#include <iterator>
#include <list>
#include <algorithm>

using namespace std;

int rotGrid[2500][2500], sum[2500][2500];


int main()
{
    int dX, dY, N, Q, testN=1;
    scanf("%d %d %d %d",&dX,&dY,&N,&Q);
    while(dX!=0 || dY!=0 || N!=0 || Q!=0)
    {
        memset(sum, 0 ,sizeof(sum));
        memset(rotGrid, 0, sizeof(rotGrid));
        for(int i=0; i<N; i++)
        {
            int x, y;
            scanf("%d %d",&x,&y);
            //origGrid[i][j] ++;
            rotGrid[x+y][y-x+dX] ++;

        }

        for(int i=0; i<=dX+dY; i++)
        {
            for(int j=0; j<=dX+dY; j++)
            {
                if(i-1 >= 0)
                {
                    sum[i][j] += sum[i-1][j];
                }
                if(j-1 >= 0)
                {
                    sum[i][j] += sum[i][j-1];
                }
                if(i-1 >= 0 && j-1 >= 0)
                {
                    sum[i][j] -= sum[i-1][j-1];
                }
                sum[i][j] += rotGrid[i][j];

                //cout << sum[i][j] << " ";
            }
            //cout << endl;
        }

        printf("Case %d:\n", testN);

        int xu, yu, xl, yl, manhattan, xm, ym, maxx, bestX, bestY;
        for(int q=0; q<Q; q++)
        {
            maxx = -1;
            scanf("%d",&manhattan);

            for(int y=1; y<=dY; y++)
            {
                for(int x=1; x<=dX; x++)
                {
                    int tempSum = 0;

                    xm = x+y;
                    ym = y-x+dX;

                    xu = max(0, xm-manhattan -1);
                    yu = max(0, ym-manhattan -1);

                    xl = min(xm+manhattan, dX+dY);
                    yl = min(ym+manhattan, dX+dY);

                    tempSum += sum[xl][yl];

                    tempSum -= sum[xl][yu];
                    tempSum -= sum[xu][yl];

                    tempSum += sum[xu][yu];

                    if(tempSum > maxx)
                    {
                        maxx = tempSum;
                        bestX = x;
                        bestY = y;
                    }
                }
            }
            printf("%d (%d,%d)\n", maxx, bestX, bestY);
        }

        testN++;
        scanf("%d %d %d %d",&dX,&dY,&N,&Q);
    }
    return 0;
}
